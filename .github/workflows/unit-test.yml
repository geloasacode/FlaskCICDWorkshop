name: Build Docker Image And Upload TO ECR

on:
  pull_request:
    branches: [ "main" ]
  workflow_run:
    workflows: [ "Python testing application" ]
    types: [completed]
  workflow_dispatch: 

jobs:
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure'}}
    steps:
      - name: Print Failure Message
        run: echo 'The Initial test failed'

  on-success:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_OIDC }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Delete All Images from ECR Repository
      run: |
        ECR_REPO_NAME="gero"

        # List all image IDs in the ECR repository
        image_ids=$(aws ecr list-images --repository-name $ECR_REPO_NAME --query 'imageIds[*]' --output json)

        # Iterate over the image IDs and delete each image
        for id in $(echo "$image_ids" | jq -r '.[] | @base64'); do
          id=$(echo "$id" | base64 --decode)
          image_digest=$(echo "$id" | jq -r '.imageDigest')
          aws ecr batch-delete-image --repository-name $ECR_REPO_NAME --image-ids imageDigest=$image_digest
        done
      env:
        AWS_DEFAULT_REGION: us-east-1  


    - name: Build, tag, and Push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: gero
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG