name: Python testing application
# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

on:
  push:
    branches: [ "main" ]

jobs:
  on-failure:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure'}}
    steps:
      - name: Print Failure Message
        run: echo 'Test failed'

  on-success:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app_folder/test-app/
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps: 
    - uses: actions/checkout@v3 # "- uses" > denotes from which predefined scripts you will get actions.
    
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"

    - name: Set up Python ${{ matrix.python-version }} # "- name" > Just the name of the action.
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }} # "We use moustache notation here which python version we will use"
    
    - name: Install dependencies
      run: | # "run" > Use for running commands to the shell.
        python -m pip install --upgrade pip
        pip install flake8 pytest flask
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest ./test.py
